#!/usr/bin/env python2
# -*- coding: utf-8 -*-

import binascii
import hashlib
import string
import random
import re

def update_pass(password, password_hash, salt='', how=96, **kwargs):
    ret = {
        'hash': None,
        'changed': None
    }
    if (_check_pw(password, password_hash) == True):
        ret['hash'] = password_hash
        ret['changed'] = False
    else:
        ret['changed'] = True
        ret['hash'] = _hash_pw(password, salt, how)
    return ret

def _check_pw(password, password_hash=None):
    if not re.match('^16:[0-9A-F]{58}$', password_hash):
      raise AssertionError("Unexpected password hash: %s" % password_hash)
 
    output_hex = binascii.a2b_hex(password_hash.strip()[3:])
    try: 
      salt, how, _ = output_hex[:8], ord(output_hex[8]), output_hex[9:]
    except TypeError:
      salt, how, _ = output_hex[:8], output_hex[8], output_hex[9:]

    if str(password_hash) == str(_hash_pw(password, salt, how=how)):
        return True
    else:
        return False


def _hash_pw(password, salt=None, how=96):
    #"S2K Algorithm, prefix 16:"
    
    if not salt:
        salt = ''.join(random.SystemRandom().choice(string.printable) for _ in range(8)).encode('UTF-8')
    assert len(salt) == 8, "Salt needs to be 8 bytes long"
    
    count = (16 + (how & 15)) << ((how >> 4) + 6)
    stuff = salt + bytes(password.encode('UTF-8'))
    repetitions = count // len(stuff) + 1
    inp = (stuff * repetitions)[:count]
    pwhash_hex = hashlib.sha1(inp).hexdigest()
    salt_hex = binascii.b2a_hex(salt).decode('UTF-8')
    hashed = ("16:%s%0x%s" % (salt_hex, how, pwhash_hex)).upper()
    return hashed


def enforce_state(module, params):
  password = params['password']
  password_hash = params['password_hash']
  
  if password_hash:
    params['changed'] = not _check_pw(password, password_hash)
    params['match'] = _check_pw(password, password_hash)
    if params['changed']:
      params['password_hash'] = str(_hash_pw(password))
  else:
    params['changed'] = True
    params['password_hash'] = str(_hash_pw(password))

  params['msg'] = str(_hash_pw(password))

  return params


def main():
  module = AnsibleModule(
    argument_spec = dict(
      password = dict(required = True, no_log=True),
      password_hash = dict(required = False, no_log=False)
    )
  )
  
  results = enforce_state(module, module.params)
  module.exit_json(**results)
  

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>
main()
